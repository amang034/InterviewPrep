// https://leetcode.com/problems/permutations/
/*
Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

All nums are unique
*/

class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> result;
        permuteRecursive(nums, 0, result);
        return result;
    }
private:
    void permuteRecursive(vector<int> nums, int start, vector<vector<int>>& result)
    {
        if (start == nums.size()-1)
        {
            result.push_back(nums);
            return;
        }
        
        for (int i = start; i < nums.size(); i++)
        {
            swap(nums, i, start);
            permuteRecursive(nums, start+1, result);
            swap(nums, i, start);
        }
    }
    
    void swap(vector<int>& nums, int a, int b)
    {
        int temp = nums[a];
        nums[a] = nums[b];
        nums[b] = temp;
    }
};