// https://leetcode.com/problems/apply-discount-every-n-orders/

/*
There is a sale in a supermarket, there will be a discount every n customer.
There are some products in the supermarket where the id of the i-th product is products[i] and the price per unit of this product is prices[i].
The system will count the number of customers and when the n-th customer arrive he/she will have a discount on the bill. (i.e if the cost is x the new cost is x - (discount * x) / 100). Then the system will start counting customers again.
The customer orders a certain amount of each product where product[i] is the id of the i-th product the customer ordered and amount[i] is the number of units the customer ordered of that product.

Implement the Cashier class:

Cashier(int n, int discount, int[] products, int[] prices) Initializes the object with n, the discount, the products and their prices.
double getBill(int[] product, int[] amount) returns the value of the bill and apply the discount if needed. Answers within 10^-5 of the actual value will be accepted as correct.
*/

class Cashier {
public:
    Cashier(int n, int discount, vector<int>& products, vector<int>& prices) {
        m_n = n;
        m_discount = discount;
        current_customer = 1;
        InitializePriceMap(products, prices);
    }
    
    double getBill(vector<int> product, vector<int> amount) {
        double bill = 0;
        double discount = 0;
        for (int i = 0; i < product.size(); i++)
        {
            bill = bill + (m_priceMap[product[i]]*amount[i]);
        }
        
        if (current_customer == m_n)
        {
            discount = (m_discount*bill)/100.0;
            current_customer = 1;
        }
        else
        {
            discount = 0;
            current_customer++;
        }
        
        bill = bill - discount;
        return bill;
    }
private:
    int m_n;
    int m_discount;
    unordered_map<int, int> m_priceMap;
    int current_customer = 1;
    
    void InitializePriceMap(const vector<int>& products, const vector<int>& prices)
    {
        for (int i = 0; i < products.size(); i++)
        {
            m_priceMap[products[i]] = prices[i];
        }
    }
};

/**
 * Your Cashier object will be instantiated and called as such:
 * Cashier* obj = new Cashier(n, discount, products, prices);
 * double param_1 = obj->getBill(product,amount);
 */