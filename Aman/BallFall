// https://leetcode.com/problems/where-will-the-ball-fall/
/*
You have a 2-D grid of size m x n representing a box, and you have n balls. The box is open on the top and bottom sides.

Each cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left.

A board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as 1.
A board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as -1.
We drop one ball at the top of each column of the box. Each ball can get stuck in the box or fall out of the bottom. A ball gets stuck if it hits a "V" shaped pattern between two boards or if a board redirects the ball into either wall of the box.

Return an array answer of size n where answer[i] is the column that the ball falls out of at the bottom after dropping the ball from the ith column at the top, or -1 if the ball gets stuck in the box.
*/

class Solution {
public:
    vector<int> findBall(vector<vector<int>>& grid) {
        vector<int> result;
        vector<vector<int>> outColumn;
        for (int i = 0; i<grid.size(); i++)
        {
            vector<int> temp(grid[i].size(), 0);
            outColumn.push_back(temp);
        }
        
        fillMatrix(grid, outColumn);
       // printGrid(outColumn);
        result = outColumn[0];
        return result;
    }
private:
    void fillMatrix(const vector<vector<int>>& grid, vector<vector<int>>& outColumn )
    {
        int rows = outColumn.size();
        int cols = rows > 0 ? outColumn[0].size() : 0;
        
        
        for (int i = rows-1; i>=0; i--)
        {
            for (int j = 0; j < cols; j++)
            {
                fillCell(grid, outColumn, i, j, rows, cols);       
            }
        }
        
        
    }
    
    void fillCell(const vector<vector<int>>& grid, vector<vector<int>>& outColumn, int row, int col, int rows, int cols)
    {

        
        if (grid[row][col] == 1)
        {
            if(col == cols-1 || grid[row][col+1] == -1)
            {
                outColumn[row][col] = -1;
            }
            else if (row == rows - 1)
            {
                outColumn[row][col] = col + 1;
            }
            else
            {
                outColumn[row][col] = outColumn[row+1][col+1];
            }
        }
        else
        {
            if(col == 0 || grid[row][col-1] == 1)
            {
                outColumn[row][col] = -1;
            }
            else if (row == rows - 1)
            {
                outColumn[row][col] = col - 1;
            }
            else 
            {
                outColumn[row][col] = outColumn[row+1][col-1];
            }
        }
    }
    
    void printGrid(const vector<vector<int>>& grid)
    {
        int rows = grid.size();
        int cols = rows > 0 ? grid[0].size() : 0;
        
        for (int i = 0; i < rows; i++)
        {
            for (int j = 0; j < cols; j++)
            {
                cout<<grid[i][j]<<" ";
            }
            
            cout<<"\n";
        }
        
    }
};