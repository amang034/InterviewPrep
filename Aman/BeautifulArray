// https://leetcode.com/problems/beautiful-array/
/*
For some fixed N, an array A is beautiful if it is a permutation of the integers 1, 2, ..., N, such that:

For every i < j, there is no k with i < k < j such that A[k] * 2 = A[i] + A[j].

Given N, return any beautiful array A.  (It is guaranteed that one exists.)
*/

class Solution {
public:
    vector<int> beautifulArray(int N) {
        vector<int> result;
        beautifulRecursive(N, result);
        return result;
    }
private:
    void beautifulRecursive(int N, vector<int>& result)
    {
        if (N == 1)
        {
            result.push_back(1);
            return;
        }
        
        vector<int> odd;
        vector<int> even;
        beautifulRecursive(N/2, even);
        
        
        if (N%2 == 1)
        {
             beautifulRecursive(N/2+1, odd);
        }
        
        for (int i = 0; i < even.size(); i++)
        {
            result.push_back(even[i]*2);
        }
        if (N%2 == 1)
        {
                for (int i = 0; i < odd.size(); i++)
                {
                    result.push_back(odd[i]*2-1);
                }
        }
        else
        {
            for (int i = 0; i < even.size(); i++)
            {
                result.push_back(even[i]*2-1);
            }
        }
    }
};