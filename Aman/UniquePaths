// https://leetcode.com/problems/unique-paths/
/*
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?

Input: m = 3, n = 7
Output: 28
*/

class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp;
        for (int i = 0; i < m; i++)
        {
            vector<int> temp(n, 0);
            dp.push_back(temp);
        }
        
        for (int i = m-1; i >= 0; i--)
        {
            for (int j = n-1; j >= 0; j--)
            {
                if (i == m-1 && j == n-1)
                {
                    dp[i][j] = 1;
                    continue;
                }
                
                int right = (j+1 < n ? dp[i][j+1] : 0);
                int down = (i+1 < m ? dp[i+1][j] : 0);
                dp[i][j] = right + down;
            }
        }
        
        return dp[0][0];
    }
};