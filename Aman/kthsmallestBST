// https://leetcode.com/problems/kth-smallest-element-in-a-bst/
/*
Given the root of a binary search tree, and an integer k, return the kth (1-indexed) smallest element in the tree.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        int count = 0;
        int val = -1;
        Traverse(root, k, count, val);
        return val;
    }
private:
    void Traverse(TreeNode* root, int k, int& count, int& val)
    {
        if (root == nullptr)
        {
            return;
        }
        
        Traverse(root->left, k, count, val);
        
        if (count >= k)
        {
            return;
        }
        
        count = count + 1;
        if (count == k)
        {
            val = root->val;
            return;
        }
        
        Traverse(root->right, k, count, val);
    }
};