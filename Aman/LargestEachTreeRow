// https://leetcode.com/problems/find-largest-value-in-each-tree-row/
/*
Given the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed).
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> largestValues(TreeNode* root) {
        map<int,int> levelMax;
        vector<int> result;
        largestValuesLevelWise(root, 0, levelMax);
        map<int,int>::iterator iter;
        for (iter = levelMax.begin(); iter != levelMax.end(); iter++)
        {
            result.push_back(iter->second);
        }
        
        return result;
    }
private:
    void largestValuesLevelWise(TreeNode* root, int level, map<int,int>& levelMax)
    {
        if(root == nullptr)
        {
            return;
        }
        
        if (levelMax.find(level) == levelMax.end())
        {
            levelMax[level] = root->val;
        }
        else if (levelMax[level] < root->val )
        {
            levelMax[level] = root->val;
        }
        
        largestValuesLevelWise(root->left, level+1, levelMax);
        largestValuesLevelWise(root->right, level+1, levelMax);
        
    }
};