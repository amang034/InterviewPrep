// https://leetcode.com/problems/letter-case-permutation/

/*
Given a string S, we can transform every letter individually to be lowercase or uppercase to create another string.

Return a list of all possible strings we could create. You can return the output in any order.
*/

class Solution {
public:
    vector<string> letterCasePermutation(string S) {
        vector<string> result;
        letterCasePermutationRecursive(S, 0, result);
        
        return result;
    }
private:
    void letterCasePermutationRecursive(string S, int currentIndex, vector<string>& result )
    {
        if (currentIndex == S.size())
        {
            result.push_back(S);
            return;
        }
        
        if (isalpha(S[currentIndex]))
        {
            // do not change
            letterCasePermutationRecursive(S, currentIndex+1, result);
            
            // change
            S[currentIndex] = (isupper(S[currentIndex] ) ? tolower(S[currentIndex]) : toupper(S[currentIndex]));
            letterCasePermutationRecursive(S, currentIndex+1, result);
        }
        else
        {
            letterCasePermutationRecursive(S, currentIndex+1, result);
        }
    }
};