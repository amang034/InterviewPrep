// https://leetcode.com/problems/minimum-path-sum/

/*
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.
*/

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int rows = grid.size();
        int cols = rows > 0 ? grid[0].size() : 0;
        vector<vector<int>> dp;
        for (int i = 0; i < rows; i++)
        {
            vector<int> temp(cols, 0);
            dp.push_back(temp);
        }
        
        for (int i = rows-1; i >=0; i--)
        {
            for (int j = cols-1; j >= 0; j--)
            {
                if (i == rows-1 && j == cols-1)
                {
                    dp[i][j] = grid[i][j];
                    continue;
                }
                
                int right = INT_MAX;
                int down = INT_MAX;
                if (j+1 < cols)
                    right = dp[i][j+1];
                if (i+1 < rows)
                    down = dp[i+1][j];
                
                dp[i][j] = grid[i][j] + min(right, down);
            }
        }
        
        return dp[0][0];
        
    }
private:
    int min(int a, int b)
    {
        if (a < b)
            return a;
        return b;
    }
};