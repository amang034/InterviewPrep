// https://leetcode.com/problems/the-k-th-lexicographical-string-of-all-happy-strings-of-length-n/
/*
A happy string is a string that:

consists only of letters of the set ['a', 'b', 'c'].
s[i] != s[i + 1] for all values of i from 1 to s.length - 1 (string is 1-indexed).
For example, strings "abc", "ac", "b" and "abcbabcbcb" are all happy strings and strings "aa", "baa" and "ababbc" are not happy strings.

Given two integers n and k, consider a list of all happy strings of length n sorted in lexicographical order.

Return the kth string of this list or return an empty string if there are less than k happy strings of length n.
Constraints:

1 <= n <= 10
1 <= k <= 100

*/

class Solution {
public:
    string getHappyString(int n, int k) {
        int count = 0;
        return getHappyString("", n, k, count);
    }
private:
    string getHappyString(string prevStr, int n, int k, int& count)
    {
        if (prevStr.size() == n)
        {
            count++;
            if (count == k)
            {
                return prevStr;
            }
            
            return "";
        }
        
        string result;
        if (prevStr.size() == 0 || prevStr[prevStr.size()-1] != 'a')
        {
            result = getHappyString(prevStr+"a", n, k, count);
        }
        
        if (result.size() == 0 && (prevStr.size() == 0 || prevStr[prevStr.size()-1] != 'b'))
        {
            result = getHappyString(prevStr+"b", n, k, count);
        }
        
        if (result.size() == 0 && (prevStr.size() == 0 || prevStr[prevStr.size()-1] != 'c'))
        {
            result = getHappyString(prevStr+"c", n, k, count);
        }
        
        return result;
    }
};