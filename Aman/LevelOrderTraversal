// https://leetcode.com/problems/binary-tree-level-order-traversal/

/*
Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]

*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        map<int, vector<int>> traversedNodes;
        levelOrder(root, 0, traversedNodes);
        
        vector<vector<int>> result;
        map<int, vector<int>>::iterator iter;
        for (iter = traversedNodes.begin(); iter != traversedNodes.end(); iter++)
        {
            result.push_back(iter->second);
        }
        
        return result;
    }
private:
    void levelOrder(TreeNode* root, int currentLevel, map<int, vector<int>>& traversedNodes)
    {
        if (root == nullptr)
        {
            return;
        }
        
        if (traversedNodes.find(currentLevel) == traversedNodes.end())
        {
            vector<int> levelNodes{root->val};
            traversedNodes[currentLevel] = levelNodes;
        }
        else
        {
            traversedNodes[currentLevel].push_back(root->val);
        }
        
        levelOrder(root->left, currentLevel+1, traversedNodes);
        levelOrder(root->right, currentLevel+1, traversedNodes);
    }
};